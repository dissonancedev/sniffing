<?php/** * Add new fields in database. * * @param array $field *   Associative field array. * * @return SAVED_NEW/FALSE *   If the record insert failed, returns FALSE. If it succeeded, returns SAVED_NEW. */function node_field_db_field_insert(&$field) {  return drupal_write_record('node_field', $field);}/** * Update fields in database. * * @param array $field *   Associative field array. * @param array $keys *   Indexed array of keys. This keys will be added in conditions with values from $field. * * @return SAVED_UPDATED/FALSE *   If the record update failed, returns FALSE. If it succeeded, returns SAVED_UPDATED. */function node_field_db_field_update(&$field) {  return drupal_write_record('node_field', $field, 'id');}/** * Delete fields from database. * * @param array $field *   Associative field array. * @param array $keys *   Indexed array of keys. This keys will be added in conditions with values from $field. * * @return numeric *   Count of deleted records. */function node_field_db_field_delete($values) {  $query = db_delete('node_field');  foreach ($values as $key => $value) {    $query->condition('node_field.' . $key, $value);  }  $output = $query->execute();  return $output;}/** * Select node node_fields. *  * @param object $node * @return array of node_fields  */function node_field_db_node_fields_select($node) {  $values = array(    'nid' => $node->nid  );  return node_field_db_field_select($values);}/** * Get fields from database. * * @param array $field *   Associative field array. * @param array $keys *   Indexed array of keys. This keys will be added in conditions with values from $field. * * @return array *   Array of fields arrays. */function node_field_db_field_select($values) {  $query = db_select('node_field');  $query->fields('node_field');  foreach ($values as $key => $value) {    $query->condition('node_field.' . $key, $value);  }  $query->orderBy('weight', 'ASC');  $result = $query->execute();  $node_fields = $result->fetchAll(PDO::FETCH_ASSOC);  foreach ($node_fields as $key => $node_field) {    if (!empty($node_field['settings'])) {      $node_fields[$key]['settings'] = unserialize($node_field['settings']);    }    else {      $node_fields[$key]['settings'] = array();    }  }  return $node_fields;}